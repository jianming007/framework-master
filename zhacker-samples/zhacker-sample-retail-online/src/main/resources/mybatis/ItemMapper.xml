<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="top.zhacker.sample.retail.online.item.domain.item.ItemRepo">
    <resultMap id="ItemMap" type="top.zhacker.sample.retail.online.item.domain.item.Item">
        <id column="id" property="id"/>
        <result column="shop_id" property="shopId"/>
        <result column="vendor_id" property="vendorId"/>
        <result column="category_id" property="categoryId"/>
        <result column="brand_id" property="brandId"/>
        <result column="tags" property="tags"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.StringListTypeHandler"/>
        <result column="photos" property="photos"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.StringListTypeHandler"/>
        <result column="title" property="title"/>
        <result column="item_no" property="itemNo"/>
        <result column="specs" property="specs"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.SkuSpecListTypeHandler"/>
        <result column="price" property="price"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.ItemPriceTypeHandler"/>
        <result column="status" property="status"/>
        <result column="recommend_score" property="recommendScore"/>
        <result column="sales" property="sales"/>
        <result column="version" property="version"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>

    </resultMap>

    <sql id="tb">
        item
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        shop_id,
        vendor_id,
        category_id,
        brand_id,
        tags,
        photos,
        title,
        item_no,
        specs,
        price,
        status,
        sales,
        recommend_score,
        version,
        created_at,
        updated_at

    </sql>

    <sql id="vals">
        #{shopId},
        #{vendorId},
        #{categoryId},
        #{brandId},
        #{tags},
        #{photos},
        #{title},
        #{itemNo},
        #{specs},
        #{price},
        #{status},
        #{sales},
        #{recommendScore},
        0,
        now(),
        now()

    </sql>

    <sql id="criteria">
        <if test="shopId != null">AND shop_id = #{shopId}</if>
        <if test="vendorId != null">AND vendor_id = #{vendorId}</if>
        <if test="categoryId != null">AND category_id = #{categoryId}</if>
        <if test="titlePart != null">AND title like concat('%', #{titlePart}, '%')</if>
        <if test="itemNo != null">AND item_no = #{itemNo}</if>
        <if test="status != null">AND status = #{status}</if>
        <if test="itemIds != null and itemIds.size > 0">
            and id in
            <foreach collection="itemIds" open="(" separator="," close=")" item="id">
                #{id}
            </foreach>
        </if>
        <if test="recommendScoreStart != null"> and recommend_score &gt; #{recommendScoreStart} </if>
        <if test="recommendScoreEnd != null"> and recommend_score &lt; #{recommendScoreEnd}</if>

    </sql>

    <insert id="create" parameterType="top.zhacker.sample.retail.online.item.domain.item.Item" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="ItemMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="top.zhacker.sample.retail.online.item.domain.item.Item">
        UPDATE <include refid="tb"/>
        <set>
            <if test="shopId != null">shop_id = #{shopId},</if>
            <if test="vendorId != null">vendor_id = #{vendorId},</if>
            <if test="categoryId != null">category_id = #{categoryId},</if>
            <if test="brandId != null">brand_id = #{brandId},</if>
            <if test="tags != null">tags = #{tags},</if>
            <if test="photos != null">photos = #{photos},</if>
            <if test="title != null">title = #{title},</if>
            <if test="itemNo != null">item_no = #{itemNo},</if>
            <if test="specs != null">specs = #{specs},</if>
            <if test="status != null">status = #{status},</if>
            <if test="price != null">price = #{price},</if>
            <if test="sales != null">sales = #{sales},</if>
            <if test="recommendScore != null">recommend_score = #{recommendScore},</if>

            updated_at=now(),
            version = version + 1
        </set>
        WHERE id = #{id} and version = #{version}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="list" parameterType="map" resultMap="ItemMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="page" parameterType="map" resultMap="ItemMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        <if test="sortedByScore != null and sortedByScore == true">
            order by recommend_score desc, id desc
        </if>
        <if test="sortedByScore == null or sortedByScore == false">
            order by id desc
        </if>
        LIMIT #{offset}, #{limit}
    </select>

</mapper>
