<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="top.zhacker.sample.retail.online.item.domain.item.sku.ItemSkuRepo">
    <resultMap id="ItemSkuMap" type="top.zhacker.sample.retail.online.item.domain.item.sku.ItemSku">
        <id column="id" property="id"/>
        <result column="item_id" property="itemId"/>
        <result column="specs" property="specs"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.SkuSpecKeyValueListTypeHandler"/>
        <!--<result column="price" property="price"-->
                <!--typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.SkuPriceTypeHandler"/>-->
        <!--<result column="promotion" property="promotion"-->
                <!--typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.SkuPromotionTypeHandler"/>-->
        <result column="origin_price" property="originPrice"/>
        <result column="sell_price" property="sellPrice"/>
        <result column="sell_price_rule" property="sellPriceRule"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.SellPriceRuleTypeHandler"/>
        <result column="diamond" property="diamond"/>
        <result column="settle_price" property="settlePrice"/>
        <result column="cost_price" property="costPrice"/>
        <result column="stock" property="stock"/>
        <result column="status" property="status"/>
        <result column="batch_no" property="batchNo"/>
        <result column="version" property="version"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>

    </resultMap>

    <sql id="tb">
        item_sku
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        item_id,
        specs,
        origin_price,
        sell_price,
        sell_price_rule,
        diamond,
        stock,
        settle_price,
        cost_price,
        status,
        batch_no,
        version,
        created_at,
        updated_at

    </sql>

    <sql id="vals">
        #{itemId},
        #{specs},
        #{originPrice},
        #{sellPrice},
        #{sellPriceRule},
        #{diamond},
        #{stock},
        #{settlePrice},
        #{costPrice},
        #{status},
        #{batchNo},
        0,
        now(),
        now()

    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="itemId != null">AND item_id = #{itemId}</if>
        <if test="specs != null">AND specs = #{specs}</if>
        <if test="stock != null">AND stock = #{stock}</if>
        <if test="version != null">AND version = #{version}</if>


    </sql>

    <insert id="create" parameterType="top.zhacker.sample.retail.online.item.domain.item.sku.ItemSku" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="ItemSkuMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>


    <select id="findByIds"  resultMap="ItemSkuMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </select>

    <select id="findByItemId" parameterType="long" resultMap="ItemSkuMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE item_id = #{itemId}
    </select>

    <update id="update" parameterType="top.zhacker.sample.retail.online.item.domain.item.sku.ItemSku">
        UPDATE <include refid="tb"/>
        <set>
            <if test="itemId != null">item_id = #{itemId},</if>
            <if test="specs != null">specs = #{specs},</if>
            <if test="originPrice != null">origin_price = #{originPrice},</if>
            <if test="sellPrice != null">sell_price = #{sellPrice},</if>
            <if test="diamond != null">diamond = #{diamond},</if>
            <if test="stock != null">stock = #{stock},</if>
            <if test="sellPriceRule != null"> sell_price_rule = #{sellPriceRule},</if>
            <if test="settlePrice != null">settle_price = #{settlePrice},</if>
            <if test="status != null">status = #{status},</if>
            <if test="batchNo != null">batch_no = #{batchNo},</if>
            <if test="costPrice != null">cost_price = #{costPrice},</if>
            updated_at=now(),
            version = version + 1
        </set>
        WHERE id = #{id} and version = #{version}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="list" parameterType="map" resultMap="ItemSkuMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="ItemSkuMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        order by id desc
        LIMIT #{offset}, #{limit}
    </select>

</mapper>
