<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="top.zhacker.sample.retail.online.item.domain.item.exhibit.ExhibitionItemRepo">
    <resultMap id="ExhibitionItemMap" type="top.zhacker.sample.retail.online.item.domain.item.exhibit.ExhibitionItem">
        <id column="id" property="id"/>
        <result column="exhibition_id" property="exhibitionId"/>
        <result column="type" property="type"/>
        <result column="item_id" property="itemId"/>
        <result column="price" property="price"
                typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.ItemPriceTypeHandler"/>
        <result column="skus" property="skus"
           typeHandler="top.zhacker.sample.retail.online.item.domain.mybatis.ExhibitionItemSkuListTypeHandler"/>
        <result column="version" property="version"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>

    </resultMap>

    <sql id="tb">
        exhibition_item
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        exhibition_id,
        type,
        item_id,
        skus,
        price,
        version,
        created_at,
        updated_at

    </sql>

    <sql id="vals">
        #{exhibitionId},
        #{type},
        #{itemId},
        #{skus},
        #{price},
        0,
        now(),
        now()

    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="exhibitionId != null">AND exhibition_id = #{exhibitionId}</if>
        <if test="type != null">AND type = #{type}</if>
        <if test="itemId != null">AND item_id = #{itemId}</if>
        <if test="version != null">AND version = #{version}</if>


    </sql>

    <insert id="create" parameterType="top.zhacker.sample.retail.online.item.domain.item.exhibit.ExhibitionItem" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="ExhibitionItemMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <select id="findByExhibitionId" parameterType="long" resultMap="ExhibitionItemMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE exhibition_id = #{exhibitionId}
    </select>

    <select id="findByTypeAndItemId" parameterType="map" resultMap="ExhibitionItemMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE type = #{type} and item_id = #{itemId}
    </select>

    <select id="findByExhibitionIdAndItemId" parameterType="map" resultMap="ExhibitionItemMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE exhibition_id = #{exhibitionId} and item_id = #{itemId} limit 1
    </select>

    <select id="findBy" parameterType="map" resultMap="ExhibitionItemMap">

        select i.* from exhibition_item i join exhibition e on i.`exhibition_id` = e.id
        where
        i.`item_id`=#{itemId}
        and i.`type` = #{type}
        and e.status &gt;=0
        and
        (
            ( e.start_at &lt;=#{startAt} and e.end_at &gt;= #{startAt} )
            or
            ( e.start_at &lt;= #{endAt} and e.end_at &gt;= #{endAt} )
        )

    </select>


    <update id="update" parameterType="top.zhacker.sample.retail.online.item.domain.item.exhibit.ExhibitionItem">
        UPDATE <include refid="tb"/>
        <set>
            <if test="exhibitionId != null">exhibition_id = #{exhibitionId},</if>
            <if test="type != null">type = #{type},</if>
            <if test="itemId != null">item_id = #{itemId},</if>
            <if test="version != null">version = #{version},</if>
            <if test="skus != null">skus = #{skus},</if>
            <if test="price != null">price = #{price},</if>

            updated_at=now(),
            version = version + 1
        </set>
        WHERE id = #{id}
    </update>

    <delete id="batchDelete" parameterType="map">
        DELETE FROM <include refid="tb"/>
        WHERE exhibition_id = #{exhibitionId} and `type` = #{type}
        and item_id in
        <foreach collection="itemIds" item="itemId" open="(" separator="," close=")">
            #{itemId}
        </foreach>
    </delete>

    <select id="list" parameterType="map" resultMap="ExhibitionItemMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="ExhibitionItemMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        order by id desc
        LIMIT #{offset}, #{limit}
    </select>

</mapper>
