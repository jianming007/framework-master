<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="top.zhacker.sample.retail.online.item.domain.item.sku.bill.StockBillRepo">
    <resultMap id="StockBillMap" type="top.zhacker.sample.retail.online.item.domain.item.sku.bill.StockBill">
        <id column="id" property="id"/>
        <result column="sku_id" property="skuId"/>
        <result column="idempotent_no" property="idempotentNo"/>
        <result column="biz_no" property="bizNo"/>
        <result column="biz_type" property="bizType"/>
        <result column="quantity" property="quantity"/>
        <result column="before_stock" property="beforeStock"/>
        <result column="after_stock" property="afterStock"/>
        <result column="admin_id" property="adminId"/>
        <result column="version" property="version"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        
    </resultMap>

    <sql id="tb">
        stock_bill
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        sku_id, 
        idempotent_no, 
        biz_no, 
        biz_type, 
        quantity, 
        before_stock, 
        after_stock, 
        admin_id, 
        version, 
        created_at, 
        updated_at
        
    </sql>

    <sql id="vals">
        #{skuId}, 
        #{idempotentNo}, 
        #{bizNo}, 
        #{bizType}, 
        #{quantity}, 
        #{beforeStock}, 
        #{afterStock}, 
        #{adminId}, 
        0,
        now(), 
        now()
        
    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="skuId != null">AND sku_id = #{skuId}</if>
        <if test="idempotentNo != null">AND idempotent_no = #{idempotentNo}</if>
        <if test="bizNo != null">AND biz_no = #{bizNo}</if>
        <if test="bizType != null">AND biz_type = #{bizType}</if>
        <if test="quantity != null">AND quantity = #{quantity}</if>
        <if test="beforeStock != null">AND before_stock = #{beforeStock}</if>
        <if test="afterStock != null">AND after_stock = #{afterStock}</if>
        <if test="adminId != null">AND admin_id = #{adminId}</if>
        <if test="version != null">AND version = #{version}</if>
        
        
        
    </sql>

    <insert id="create" parameterType="top.zhacker.sample.retail.online.item.domain.item.sku.bill.StockBill" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_exclude_id" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <select id="findById" parameterType="long" resultMap="StockBillMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="top.zhacker.sample.retail.online.item.domain.item.sku.bill.StockBill">
        UPDATE <include refid="tb"/>
        <set>
            <if test="skuId != null">sku_id = #{skuId},</if>
            <if test="idempotentNo != null">idempotent_no = #{idempotentNo},</if>
            <if test="bizNo != null">biz_no = #{bizNo},</if>
            <if test="bizType != null">biz_type = #{bizType},</if>
            <if test="quantity != null">quantity = #{quantity},</if>
            <if test="beforeStock != null">before_stock = #{beforeStock},</if>
            <if test="afterStock != null">after_stock = #{afterStock},</if>
            <if test="adminId != null">admin_id = #{adminId},</if>

            
            updated_at=now(),
            version = version + 1
        </set>
        WHERE id = #{id} and version = #{version}
    </update>

    <delete id="batchDelete" parameterType="long">
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <select id="list" parameterType="map" resultMap="StockBillMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="count" parameterType="map" resultType="long">
        SELECT count(1) FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <select id="paging" parameterType="map" resultMap="StockBillMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
        LIMIT #{offset}, #{limit}
    </select>

</mapper>
